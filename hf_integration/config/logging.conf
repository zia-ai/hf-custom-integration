# logging.conf provides the configuration for logging in Custom integration
# Currently it supports 3 handlers - consoleHandler and nullHandler
#   consoleHandler - Helps in printing the logs in the console
#   nullhandler - Helps in prevention of logging
#   rotatingFileHandler - Helps in saving the logs to a file and manage it
[loggers]
keys=root,custom_integration.clu_apis,custom_integration.clu_converters,custom_integration.main,custom_integration.model_clu,custom_integration.workspace_clu,urllib3,grpc,azure.core.pipeline.policies.http_logging_policy

[handlers]
keys=consoleHandler,rotatingFileHandler,nullHandler

[formatters]
keys=simpleFormatter

# This is compulsory - without which logging.conf won't work
[logger_root]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s

# No need to propagate to root since consoleHandler is attached
#propogate is set to 0 for the below loggers
[logger_custom_integration.clu_apis]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=custom_integration.clu_apis
propagate=0

[logger_custom_integration.clu_converters]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=custom_integration.clu_converters
propagate=0

[logger_custom_integration.main]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=custom_integration.main
propagate=0

[logger_custom_integration.model_clu]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=custom_integration.model_clu
propagate=0

[logger_custom_integration.workspace_clu]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=custom_integration.workspace_clu
propagate=0

# Logger for urllib3 to capture connection details
[logger_urllib3]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=urllib3
propagate=0

# Logger for grpc
[logger_grpc]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=grpc
propagate=0

# Logger for azure.core.pipeline.policies.http_logging_policy
# Even without this logger config, logs from azure sdk goes to the log file based on the rest of the logging configuration
# Still this is kept here to ensure the logs are controlled in future if something changes in azure sdk
[logger_azure.core.pipeline.policies.http_logging_policy]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=azure.core.pipeline.policies.http_logging_policy
propagate=0

# Logger for ssl_transport_security to capture SSL handshake errors
# Even with this logger config, logs from SSL goes to the console. This may be due to python not being able to overrise the logging configuration for SSL written in C/C# 
# Still this is kept here to ensure the logs are controlled in future if something changes
[logger_ssl_transport_security]
level=%(CI_LOG_LEVEL)s
handlers=%(CI_LOG_HANDLER)s
qualname=ssl_transport_security
propagate=0

# Logger for printing the contents in the console
[handler_consoleHandler]
class=StreamHandler
level=%(CI_LOG_LEVEL)s
formatter=simpleFormatter
args=(sys.stdout,)


# Rotating File Handler to implement rotating log files
# When the log file size exceeds 1GB (default size). Automatically a new file is created and old one is saved
# Can go to upto 4 additional log files
# If the number of log files exceed the CI_LOG_FILE_COUNT + 1, then automatically the oldest log file is deleted
# args = (log_path, mode=append, logfile size, backup count, encoding)
[handler_rotatingFileHandler]
class=handlers.RotatingFileHandler
level=%(CI_LOG_LEVEL)s
formatter=simpleFormatter
args=('%(CI_LOG_FILE_PATH)s', 'a', 1073741824 , 4, 'utf8')

[handler_nullHandler]
class=NullHandler
level=%(CI_LOG_LEVEL)s
formatter=simpleFormatter

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S