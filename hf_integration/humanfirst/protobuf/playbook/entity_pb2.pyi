"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import longrunning.v1alpha1.operations_pb2
import playbook.span_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SystemEntityType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SystemEntityTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SystemEntityType.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SYS_UNKNOWN: _SystemEntityType.ValueType  # 0
    SYS_EMAIL: _SystemEntityType.ValueType  # 1
    SYS_PHONE_NUMBER: _SystemEntityType.ValueType  # 2
    SYS_DATE: _SystemEntityType.ValueType  # 3
    SYS_TIME: _SystemEntityType.ValueType  # 4
    SYS_DATE_TIME: _SystemEntityType.ValueType  # 5
    SYS_URL: _SystemEntityType.ValueType  # 6
    SYS_ZIP_CODE: _SystemEntityType.ValueType  # 7
    SYS_NUMBER: _SystemEntityType.ValueType  # 8

class SystemEntityType(_SystemEntityType, metaclass=_SystemEntityTypeEnumTypeWrapper):
    """Inspired by DialogFlow naming convention
    See https://cloud.google.com/dialogflow/cx/docs/reference/system-entities
    """

SYS_UNKNOWN: SystemEntityType.ValueType  # 0
SYS_EMAIL: SystemEntityType.ValueType  # 1
SYS_PHONE_NUMBER: SystemEntityType.ValueType  # 2
SYS_DATE: SystemEntityType.ValueType  # 3
SYS_TIME: SystemEntityType.ValueType  # 4
SYS_DATE_TIME: SystemEntityType.ValueType  # 5
SYS_URL: SystemEntityType.ValueType  # 6
SYS_ZIP_CODE: SystemEntityType.ValueType  # 7
SYS_NUMBER: SystemEntityType.ValueType  # 8
global___SystemEntityType = SystemEntityType

class Entity(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___EntityValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___EntityValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class RegexKind(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    class SystemKind(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WELL_KNOWN_TYPE_FIELD_NUMBER: builtins.int
        OTHER_TYPE_FIELD_NUMBER: builtins.int
        well_known_type: global___SystemEntityType.ValueType
        """Type of the system entity if it's part of the well known
        types supported by HumanFirst.

        Otherwise, `unknown` should be used an `other_type`
        filled in with the external NLU type name.
        (ex: sys.flight-number on DialogFlow)
        """
        other_type: builtins.str
        """For external NLUs, if the system entity type is not defined in
        the well known types, this should be filled with the type in the
        external NLU (ex: sys.flight-number in DialogFlow)
        """
        def __init__(
            self,
            *,
            well_known_type: global___SystemEntityType.ValueType = ...,
            other_type: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["other_type", b"other_type", "well_known_type", b"well_known_type"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    REGEX_FIELD_NUMBER: builtins.int
    SYSTEM_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    UPDATED_AT_FIELD_NUMBER: builtins.int
    DELETED_AT_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Unique identifier used for database storage"""
    key: builtins.str
    """Key by which we can refer to this entity in the utterance
    Ex (rasa): `I'd like to visit [New York City](city)` where `city` is the key
    """
    @property
    def regex(self) -> global___Entity.RegexKind:
        """Entity extraction using one or more regular expressions.
        Regular expressions are defined in the values.
        """
    @property
    def system(self) -> global___Entity.SystemKind:
        """Pre-trained system entity (ex: time, date, etc.)"""
    @property
    def values(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___EntityValue]:
        """Map of entity values, where the key is the main / key value (ex: New York City)
        and the `EntityValue` message contains information about this specific value such
        as the synonyms (ex: NYC, The Big Apple)

        Values can be seen as a list of concrete examples of the entity. For example, for
        a `city` entity, these values can be `New York City`, `Montreal`, etc.

        See `EntityReference.value` for how these values are referenced.

        For regex entities, each value represents a different regular expression.

        For system entities, values can be used to extend the potential values of the
        entity, but only if the extension is possible for the type of system entity and
        supported by the NLU engine.
        """
    @property
    def source(self) -> global___EntitySource:
        """Information on the source of the entity."""
    @property
    def settings(self) -> global___EntitySettings:
        """Settings for the entity"""
    @property
    def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Creation date of the entity"""
    @property
    def updated_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """(Optional) Update date of the entity"""
    @property
    def deleted_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """(Optional) Deletion date of the entity"""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        key: builtins.str = ...,
        regex: global___Entity.RegexKind | None = ...,
        system: global___Entity.SystemKind | None = ...,
        values: collections.abc.Mapping[builtins.str, global___EntityValue] | None = ...,
        source: global___EntitySource | None = ...,
        settings: global___EntitySettings | None = ...,
        created_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        updated_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        deleted_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created_at", b"created_at", "deleted_at", b"deleted_at", "kind", b"kind", "regex", b"regex", "settings", b"settings", "source", b"source", "system", b"system", "updated_at", b"updated_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["created_at", b"created_at", "deleted_at", b"deleted_at", "id", b"id", "key", b"key", "kind", b"kind", "regex", b"regex", "settings", b"settings", "source", b"source", "system", b"system", "updated_at", b"updated_at", "values", b"values"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind", b"kind"]) -> typing_extensions.Literal["regex", "system"] | None: ...

global___Entity = Entity

class EntitySource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Dialogflow(google.protobuf.message.Message):
        """next id = 6"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Kind:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[EntitySource.Dialogflow._Kind.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            KIND_INVALID: EntitySource.Dialogflow._Kind.ValueType  # 0
            KIND_MAP: EntitySource.Dialogflow._Kind.ValueType  # 1
            KIND_LIST: EntitySource.Dialogflow._Kind.ValueType  # 2
            KIND_REGEXP: EntitySource.Dialogflow._Kind.ValueType  # 3

        class Kind(_Kind, metaclass=_KindEnumTypeWrapper): ...
        KIND_INVALID: EntitySource.Dialogflow.Kind.ValueType  # 0
        KIND_MAP: EntitySource.Dialogflow.Kind.ValueType  # 1
        KIND_LIST: EntitySource.Dialogflow.Kind.ValueType  # 2
        KIND_REGEXP: EntitySource.Dialogflow.Kind.ValueType  # 3

        KIND_FIELD_NUMBER: builtins.int
        kind: global___EntitySource.Dialogflow.Kind.ValueType
        def __init__(
            self,
            *,
            kind: global___EntitySource.Dialogflow.Kind.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["kind", b"kind"]) -> None: ...

    class Rasa(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    class HumanFirst(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _MatchMode:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _MatchModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[EntitySource.HumanFirst._MatchMode.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            MATCH_MODE_ALL_INTENTS: EntitySource.HumanFirst._MatchMode.ValueType  # 0
            """Match the entity on all intents."""
            MATCH_MODE_TRAINED_INTENTS: EntitySource.HumanFirst._MatchMode.ValueType  # 1
            """Only match the entity if the matching intent has been annotated on at least one
            of its training phrase.
            """
            MATCH_MODE_NEVER: EntitySource.HumanFirst._MatchMode.ValueType  # 2
            """Never match the entity.
            May be used to prevent an entity that can only be used within a composite entity.
            """

        class MatchMode(_MatchMode, metaclass=_MatchModeEnumTypeWrapper): ...
        MATCH_MODE_ALL_INTENTS: EntitySource.HumanFirst.MatchMode.ValueType  # 0
        """Match the entity on all intents."""
        MATCH_MODE_TRAINED_INTENTS: EntitySource.HumanFirst.MatchMode.ValueType  # 1
        """Only match the entity if the matching intent has been annotated on at least one
        of its training phrase.
        """
        MATCH_MODE_NEVER: EntitySource.HumanFirst.MatchMode.ValueType  # 2
        """Never match the entity.
        May be used to prevent an entity that can only be used within a composite entity.
        """

        MATCH_MODE_FIELD_NUMBER: builtins.int
        match_mode: global___EntitySource.HumanFirst.MatchMode.ValueType
        """Controls how the entity gets matched."""
        def __init__(
            self,
            *,
            match_mode: global___EntitySource.HumanFirst.MatchMode.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["match_mode", b"match_mode"]) -> None: ...

    SOURCE_ID_FIELD_NUMBER: builtins.int
    MERGED_IDS_FIELD_NUMBER: builtins.int
    DIALOGFLOW_FIELD_NUMBER: builtins.int
    RASA_FIELD_NUMBER: builtins.int
    HUMANFIRST_FIELD_NUMBER: builtins.int
    source_id: builtins.str
    """ID of the entity at its source if it has been imported"""
    @property
    def merged_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of unique identifiers of entity from HumanFirst or
        external integrations that got merged into this entity
        at some point and that can be reused to ease further
        merges.

        This list may not be exhaustive and could be truncated.
        """
    @property
    def dialogflow(self) -> global___EntitySource.Dialogflow: ...
    @property
    def rasa(self) -> global___EntitySource.Rasa: ...
    @property
    def humanfirst(self) -> global___EntitySource.HumanFirst: ...
    def __init__(
        self,
        *,
        source_id: builtins.str = ...,
        merged_ids: collections.abc.Iterable[builtins.str] | None = ...,
        dialogflow: global___EntitySource.Dialogflow | None = ...,
        rasa: global___EntitySource.Rasa | None = ...,
        humanfirst: global___EntitySource.HumanFirst | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dialogflow", b"dialogflow", "humanfirst", b"humanfirst", "rasa", b"rasa", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dialogflow", b"dialogflow", "humanfirst", b"humanfirst", "merged_ids", b"merged_ids", "rasa", b"rasa", "source_id", b"source_id", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["dialogflow", "rasa", "humanfirst"] | None: ...

global___EntitySource = EntitySource

class EntitySettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALLOWED_INTENT_IDS_FIELD_NUMBER: builtins.int
    DENIED_INTENT_IDS_FIELD_NUMBER: builtins.int
    @property
    def allowed_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Intents that are allowed to be annotated with this entity.
        If empty, all intents are considered allowed.
        """
    @property
    def denied_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Intents that are not allowed to be annotated with this entity.
        If empty, no intents are considered denied.
        """
    def __init__(
        self,
        *,
        allowed_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
        denied_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allowed_intent_ids", b"allowed_intent_ids", "denied_intent_ids", b"denied_intent_ids"]) -> None: ...

global___EntitySettings = EntitySettings

class EntityReference(google.protobuf.message.Message):
    """Some fields are replicated in:
    zia.ai.external_nlu.v1alpha1.EntityReference
    zia.ai.nlu.v1alpha1.EntityReference
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_ID_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    INVALID_ENTITY_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    VALUE_ID_FIELD_NUMBER: builtins.int
    INVALID_VALUE_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    entity_id: builtins.str
    """Unique identifier of the entity for database storage."""
    key: builtins.str
    """Key by which we can refer to this entity in the utterance.
    Ex (rasa): `I'd like to visit [New York City](city)` where `city` is the key
    """
    invalid_entity: builtins.bool
    """Indicates that the reference points to an invalid entity."""
    text: builtins.str
    """Text used to reference the entity in the utterance
    Ex (rasa): `I'd like to visit [New York City](city)` where `New York City` is the text.
    """
    value: builtins.str
    """If the reference text isn't the main entity value, this value points to the right
    key value to use.

    For example, for a `city` entity, if a synonym was used, this value would contain the
    key value it refers to in the entity.

       (rasa long): I went to [NYC]{"entity": "city", "value": "New York City"}
                    where 'New York City' is the value

       (rasa short): I went to [NYC](city:New York City)
    """
    value_id: builtins.str
    """Unique identifier of the entity value for database storage."""
    invalid_value: builtins.bool
    """Indicates that the reference points to an invalid entity value."""
    role: builtins.str
    """If entity has repeated usage in the utterance, assigns role for each usage
    Ex (rasa): I want to fly from [Berlin]{"entity": "city", "role": "departure"} to [San Francisco]{"entity": "city", "role": "destination"}.
    """
    @property
    def source(self) -> global___ReferenceSource:
        """Source information"""
    def __init__(
        self,
        *,
        entity_id: builtins.str = ...,
        key: builtins.str = ...,
        invalid_entity: builtins.bool = ...,
        text: builtins.str = ...,
        value: builtins.str = ...,
        value_id: builtins.str = ...,
        invalid_value: builtins.bool = ...,
        role: builtins.str = ...,
        source: global___ReferenceSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "invalid_entity", b"invalid_entity", "invalid_value", b"invalid_value", "key", b"key", "role", b"role", "source", b"source", "text", b"text", "value", b"value", "value_id", b"value_id"]) -> None: ...

global___EntityReference = EntityReference

class ReferenceSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Dialogflow(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        USER_DEFINED_FIELD_NUMBER: builtins.int
        ALIAS_FIELD_NUMBER: builtins.int
        user_defined: builtins.bool
        """Whether the entity is user defined or a system entity (ex: date)"""
        alias: builtins.str
        """Parameter name / alias
        See https://stackoverflow.com/questions/52862132/dialogflow-intent-api-what-do-the-object-fields-in-the-intent-usersays-stand
        """
        def __init__(
            self,
            *,
            user_defined: builtins.bool = ...,
            alias: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["alias", b"alias", "user_defined", b"user_defined"]) -> None: ...

    class Rasa(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SHORT_FORMAT_FIELD_NUMBER: builtins.int
        short_format: builtins.bool
        """For rasa, this force the use of the short form (`[Display](key)`) instead of the long one (`[Display]{"entity": "key"}`)"""
        def __init__(
            self,
            *,
            short_format: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["short_format", b"short_format"]) -> None: ...

    DIALOGFLOW_FIELD_NUMBER: builtins.int
    RASA_FIELD_NUMBER: builtins.int
    @property
    def dialogflow(self) -> global___ReferenceSource.Dialogflow: ...
    @property
    def rasa(self) -> global___ReferenceSource.Rasa: ...
    def __init__(
        self,
        *,
        dialogflow: global___ReferenceSource.Dialogflow | None = ...,
        rasa: global___ReferenceSource.Rasa | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dialogflow", b"dialogflow", "rasa", b"rasa", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dialogflow", b"dialogflow", "rasa", b"rasa", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["dialogflow", "rasa"] | None: ...

global___ReferenceSource = ReferenceSource

class InputEntity(google.protobuf.message.Message):
    """An entity reference, with the additional information on where it has been found in an utterance."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_FIELD_NUMBER: builtins.int
    SPAN_FIELD_NUMBER: builtins.int
    @property
    def reference(self) -> global___EntityReference:
        """Referred entity"""
    @property
    def span(self) -> playbook.span_pb2.SpanIndex:
        """Positions in the training phrase text"""
    def __init__(
        self,
        *,
        reference: global___EntityReference | None = ...,
        span: playbook.span_pb2.SpanIndex | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reference", b"reference", "span", b"span"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["reference", b"reference", "span", b"span"]) -> None: ...

global___InputEntity = InputEntity

class InputPart(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Text(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TEXT_FIELD_NUMBER: builtins.int
        text: builtins.str
        def __init__(
            self,
            *,
            text: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["text", b"text"]) -> None: ...

    TEXT_FIELD_NUMBER: builtins.int
    ENTITY_FIELD_NUMBER: builtins.int
    @property
    def text(self) -> global___InputPart.Text: ...
    @property
    def entity(self) -> global___EntityReference: ...
    def __init__(
        self,
        *,
        text: global___InputPart.Text | None = ...,
        entity: global___EntityReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity", "text", b"text", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity", "text", b"text", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["text", "entity"] | None: ...

global___InputPart = InputPart

class EntityValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ComplexSynonym(google.protobuf.message.Message):
        """Complex form of a synonym."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VALUE_FIELD_NUMBER: builtins.int
        ENTITIES_FIELD_NUMBER: builtins.int
        PARTS_FIELD_NUMBER: builtins.int
        value: builtins.str
        """Value / text of the synonym"""
        @property
        def entities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputEntity]:
            """(Optional) Entities annotated in the `value`. This is used
            when the entity is a composed entity that references other
            entities (composite entities)

            If the `parts` field is provided on creation or update, this field is ignored and
            rebuilt from `parts`.
            """
        @property
        def parts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputPart]:
            """(Optional) Parts of the text and the entities. This is used
            when the entity is a composed entity that references other
            entities (composite entities).

            The parts are concatenated to form the final text. Parts are provided to
            ease entity annotations.
            """
        def __init__(
            self,
            *,
            value: builtins.str = ...,
            entities: collections.abc.Iterable[global___InputEntity] | None = ...,
            parts: collections.abc.Iterable[global___InputPart] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["entities", b"entities", "parts", b"parts", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    KEY_VALUE_FIELD_NUMBER: builtins.int
    KEY_VALUE_ENTITIES_FIELD_NUMBER: builtins.int
    KEY_VALUE_PARTS_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    SYNONYMS_FIELD_NUMBER: builtins.int
    COMPLEX_SYNONYMS_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    UPDATED_AT_FIELD_NUMBER: builtins.int
    DELETED_AT_FIELD_NUMBER: builtins.int
    IMPLICIT_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Unique identifier used for database storage."""
    entity_id: builtins.str
    """Unique identifier of the entity for database storage.
    There is no guarantee that this field will be filled in.
    Use the id on the entity instead.
    """
    key_value: builtins.str
    """Main value of the synonym (ex: New York City) of normal entities.
    For regex entities, this is the value of the regex.
    """
    @property
    def key_value_entities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputEntity]:
        """If supported by the NLU engine, entities referenced in `key_value`.
        Ex: DialogFlow composite entities are referenced here.

        If the `key_value_parts` field is provided on creation or update, this field is ignored and
        rebuilt from `key_value_parts`.
        """
    @property
    def key_value_parts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputPart]:
        """If supported by the NLU engine and that `key_value` contains entity references,
        this field contains the parts of the text and the entities. The parts are concatenated
        to form the final text. Parts are provided to ease entity annotations.
        """
    language: builtins.str
    """Value in which this entity synonym is."""
    @property
    def synonyms(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Synonyms of the entity value (ex: NYC, The Big Apple)"""
    @property
    def complex_synonyms(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EntityValue.ComplexSynonym]:
        """Synonyms of the entity value, with complex values.
        Ex: synonyms that contain entity references.
        """
    @property
    def source(self) -> global___EntityValueSource:
        """Information on the source of the entity value"""
    @property
    def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Creation date of the entity value"""
    @property
    def updated_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """(Optional) Update date of the entity value"""
    @property
    def deleted_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """(Optional) Deletion date of the entity value"""
    implicit: builtins.bool
    """Signals that the entity value is not explicitly declared on an entity."""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        entity_id: builtins.str = ...,
        key_value: builtins.str = ...,
        key_value_entities: collections.abc.Iterable[global___InputEntity] | None = ...,
        key_value_parts: collections.abc.Iterable[global___InputPart] | None = ...,
        language: builtins.str = ...,
        synonyms: collections.abc.Iterable[builtins.str] | None = ...,
        complex_synonyms: collections.abc.Iterable[global___EntityValue.ComplexSynonym] | None = ...,
        source: global___EntityValueSource | None = ...,
        created_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        updated_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        deleted_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        implicit: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created_at", b"created_at", "deleted_at", b"deleted_at", "source", b"source", "updated_at", b"updated_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["complex_synonyms", b"complex_synonyms", "created_at", b"created_at", "deleted_at", b"deleted_at", "entity_id", b"entity_id", "id", b"id", "implicit", b"implicit", "key_value", b"key_value", "key_value_entities", b"key_value_entities", "key_value_parts", b"key_value_parts", "language", b"language", "source", b"source", "synonyms", b"synonyms", "updated_at", b"updated_at"]) -> None: ...

global___EntityValue = EntityValue

class EntityValueSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Rasa(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FROM_LOOKUP_FIELD_NUMBER: builtins.int
        FILENAME_FIELD_NUMBER: builtins.int
        from_lookup: builtins.bool
        filename: builtins.str
        """File from which the entity was imported. Used to export it back in the same file."""
        def __init__(
            self,
            *,
            from_lookup: builtins.bool = ...,
            filename: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["filename", b"filename", "from_lookup", b"from_lookup"]) -> None: ...

    SOURCE_ID_FIELD_NUMBER: builtins.int
    MERGED_IDS_FIELD_NUMBER: builtins.int
    RASA_FIELD_NUMBER: builtins.int
    source_id: builtins.str
    """ID of the entity value at its source if it has been imported (if applicable)"""
    @property
    def merged_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of unique identifiers of entity values from HumanFirst or
        external integrations that got merged into this entity values
        at some point and that can be reused to ease further
        merges.

        This list may not be exhaustive and could be truncated.
        """
    @property
    def rasa(self) -> global___EntityValueSource.Rasa: ...
    def __init__(
        self,
        *,
        source_id: builtins.str = ...,
        merged_ids: collections.abc.Iterable[builtins.str] | None = ...,
        rasa: global___EntityValueSource.Rasa | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["rasa", b"rasa", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["merged_ids", b"merged_ids", "rasa", b"rasa", "source_id", b"source_id", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["rasa"] | None: ...

global___EntityValueSource = EntityValueSource

class ListEntitiesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___ListEntitiesRequest = ListEntitiesRequest

class ListEntitiesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITIES_FIELD_NUMBER: builtins.int
    @property
    def entities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Entity]: ...
    def __init__(
        self,
        *,
        entities: collections.abc.Iterable[global___Entity] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entities", b"entities"]) -> None: ...

global___ListEntitiesResponse = ListEntitiesResponse

class GetEntityRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    ENTITY_KEY_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    entity_key: builtins.str
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        entity_key: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "entity_key", b"entity_key", "identifier", b"identifier"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "entity_key", b"entity_key", "identifier", b"identifier", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["identifier", b"identifier"]) -> typing_extensions.Literal["entity_id", "entity_key"] | None: ...

global___GetEntityRequest = GetEntityRequest

class GetEntityResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_FIELD_NUMBER: builtins.int
    @property
    def entity(self) -> global___Entity: ...
    def __init__(
        self,
        *,
        entity: global___Entity | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> None: ...

global___GetEntityResponse = GetEntityResponse

class CreateEntityRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    @property
    def entity(self) -> global___Entity:
        """Entity to create."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity: global___Entity | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___CreateEntityRequest = CreateEntityRequest

class CreateEntityResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_FIELD_NUMBER: builtins.int
    @property
    def entity(self) -> global___Entity:
        """Created entity"""
    def __init__(
        self,
        *,
        entity: global___Entity | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> None: ...

global___CreateEntityResponse = CreateEntityResponse

class UpdateEntityRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    UPDATE_ALL_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    @property
    def entity(self) -> global___Entity:
        """Entity with updated fields."""
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Mask defining which fields to update"""
    update_all: builtins.bool
    """Forces the update of all fields without specifying a mask"""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity: global___Entity | None = ...,
        update_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        update_all: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity", "update_mask", b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity", "namespace", b"namespace", "playbook_id", b"playbook_id", "update_all", b"update_all", "update_mask", b"update_mask"]) -> None: ...

global___UpdateEntityRequest = UpdateEntityRequest

class UpdateEntityResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_FIELD_NUMBER: builtins.int
    @property
    def entity(self) -> global___Entity:
        """Updated entity"""
    def __init__(
        self,
        *,
        entity: global___Entity | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity", b"entity"]) -> None: ...

global___UpdateEntityResponse = UpdateEntityResponse

class DeleteEntityRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___DeleteEntityRequest = DeleteEntityRequest

class DeleteEntityResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DeleteEntityResponse = DeleteEntityResponse

class ListSystemEntitiesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___ListSystemEntitiesRequest = ListSystemEntitiesRequest

class ListSystemEntitiesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class SystemEntity(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SYSTEM_TYPE_FIELD_NUMBER: builtins.int
        KEY_FIELD_NUMBER: builtins.int
        LOCAL_ENTITY_FIELD_NUMBER: builtins.int
        system_type: global___SystemEntityType.ValueType
        """Unique type of the system entity"""
        key: builtins.str
        """Key of the system entity"""
        @property
        def local_entity(self) -> global___Entity:
            """If the system entity is used in the project, this will contain
            the instance of the entity.
            """
        def __init__(
            self,
            *,
            system_type: global___SystemEntityType.ValueType = ...,
            key: builtins.str = ...,
            local_entity: global___Entity | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["local_entity", b"local_entity"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "local_entity", b"local_entity", "system_type", b"system_type"]) -> None: ...

    ENTITIES_FIELD_NUMBER: builtins.int
    @property
    def entities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ListSystemEntitiesResponse.SystemEntity]: ...
    def __init__(
        self,
        *,
        entities: collections.abc.Iterable[global___ListSystemEntitiesResponse.SystemEntity] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entities", b"entities"]) -> None: ...

global___ListSystemEntitiesResponse = ListSystemEntitiesResponse

class DeleteEntityReferencesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    VALUE_ID_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    INTENT_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    """(Optional if `intent_id` is provided) Delete all references to a specific entity.
    If `value_id` is provided, only references to that entity value are deleted.
    """
    value_id: builtins.str
    """(Optional) Delete all references to a specific entity value.
    If `text` is provided, only references to that entity value text are deleted.
    If not specified, delete all references to the entity.
    """
    text: builtins.str
    """(Optional) Delete all references to a specific entity value text.
    If not specified, delete all references to the entity value.
    """
    intent_id: builtins.str
    """(Optional if `entity_id` is provided) Delete all references of all phrases from a specific intent.
    If not specified, delete all references to the entity if `entity_id` is provided.
    """
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        value_id: builtins.str = ...,
        text: builtins.str = ...,
        intent_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "intent_id", b"intent_id", "namespace", b"namespace", "playbook_id", b"playbook_id", "text", b"text", "value_id", b"value_id"]) -> None: ...

global___DeleteEntityReferencesRequest = DeleteEntityReferencesRequest

class DeleteEntityReferencesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DELETED_COUNT_FIELD_NUMBER: builtins.int
    deleted_count: builtins.int
    """Number of deleted references."""
    def __init__(
        self,
        *,
        deleted_count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["deleted_count", b"deleted_count"]) -> None: ...

global___DeleteEntityReferencesResponse = DeleteEntityReferencesResponse

class RemapEntityReferencesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Remapping(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ENTITY_ID_FIELD_NUMBER: builtins.int
        VALUE_ID_FIELD_NUMBER: builtins.int
        SYNONYM_FIELD_NUMBER: builtins.int
        TO_ENTITY_ID_FIELD_NUMBER: builtins.int
        TO_VALUE_ID_FIELD_NUMBER: builtins.int
        INTENT_ID_FIELD_NUMBER: builtins.int
        entity_id: builtins.str
        """Entity of the entity value to remap from"""
        value_id: builtins.str
        """Entity value to remap from"""
        synonym: builtins.str
        """(Optional) Limit the remapping to references that use a specific synonym."""
        to_entity_id: builtins.str
        """Entity of the entity value to remap to"""
        to_value_id: builtins.str
        """Entity value to remap to"""
        intent_id: builtins.str
        """Intent to scope the remapping changes to"""
        def __init__(
            self,
            *,
            entity_id: builtins.str = ...,
            value_id: builtins.str = ...,
            synonym: builtins.str = ...,
            to_entity_id: builtins.str = ...,
            to_value_id: builtins.str = ...,
            intent_id: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "intent_id", b"intent_id", "synonym", b"synonym", "to_entity_id", b"to_entity_id", "to_value_id", b"to_value_id", "value_id", b"value_id"]) -> None: ...

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    VALUE_ID_FIELD_NUMBER: builtins.int
    SYNONYM_FIELD_NUMBER: builtins.int
    TO_ENTITY_ID_FIELD_NUMBER: builtins.int
    TO_VALUE_ID_FIELD_NUMBER: builtins.int
    REMAPPINGS_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    """Entity of the entity value to remap from
    Deprecated: use `remappings` instead
    """
    value_id: builtins.str
    """Entity value to remap from
    Deprecated: use `remappings` instead
    """
    synonym: builtins.str
    """(Optional) Limit the remapping to references that use a specific synonym.
    Deprecated: use `remappings` instead
    """
    to_entity_id: builtins.str
    """Entity of the entity value to remap to
    Deprecated: use `remappings` instead
    """
    to_value_id: builtins.str
    """Entity value to remap to
    Deprecated: use `remappings` instead
    """
    @property
    def remappings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RemapEntityReferencesRequest.Remapping]: ...
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        value_id: builtins.str = ...,
        synonym: builtins.str = ...,
        to_entity_id: builtins.str = ...,
        to_value_id: builtins.str = ...,
        remappings: collections.abc.Iterable[global___RemapEntityReferencesRequest.Remapping] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "namespace", b"namespace", "playbook_id", b"playbook_id", "remappings", b"remappings", "synonym", b"synonym", "to_entity_id", b"to_entity_id", "to_value_id", b"to_value_id", "value_id", b"value_id"]) -> None: ...

global___RemapEntityReferencesRequest = RemapEntityReferencesRequest

class RemapEntityReferencesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REMAPPED_COUNT_FIELD_NUMBER: builtins.int
    BACKGROUND_OPERATION_FIELD_NUMBER: builtins.int
    remapped_count: builtins.int
    """Number of remapped references."""
    @property
    def background_operation(self) -> longrunning.v1alpha1.operations_pb2.Operation:
        """If this is set, the remapping was not completed yet.
        The user should poll `GetOperation` until it's done.
        """
    def __init__(
        self,
        *,
        remapped_count: builtins.int = ...,
        background_operation: longrunning.v1alpha1.operations_pb2.Operation | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["background_operation", b"background_operation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["background_operation", b"background_operation", "remapped_count", b"remapped_count"]) -> None: ...

global___RemapEntityReferencesResponse = RemapEntityReferencesResponse

class GetEntitySettingsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook."""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    """Id of the entity to get intent settings of."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___GetEntitySettingsRequest = GetEntitySettingsRequest

class GetEntitySettingsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALLOWED_INTENT_IDS_FIELD_NUMBER: builtins.int
    DENIED_INTENT_IDS_FIELD_NUMBER: builtins.int
    @property
    def allowed_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The explicit list of intent ids that are permitted for this entity to be attached to."""
    @property
    def denied_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The explicit list of intent ids that are not permitted for this entity to be attached to."""
    def __init__(
        self,
        *,
        allowed_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
        denied_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allowed_intent_ids", b"allowed_intent_ids", "denied_intent_ids", b"denied_intent_ids"]) -> None: ...

global___GetEntitySettingsResponse = GetEntitySettingsResponse

class SetEntitySettingsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    ALLOWED_INTENT_IDS_FIELD_NUMBER: builtins.int
    DENIED_INTENT_IDS_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook."""
    playbook_id: builtins.str
    """Metastore ID of the playbook."""
    entity_id: builtins.str
    """Id of the entity to set intent settings on."""
    @property
    def allowed_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The explicit list of intent ids that are permitted for this entity to be attached to."""
    @property
    def denied_intent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The explicit list of intent ids that are not permitted for this entity to be attached to."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        allowed_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
        denied_intent_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allowed_intent_ids", b"allowed_intent_ids", "denied_intent_ids", b"denied_intent_ids", "entity_id", b"entity_id", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___SetEntitySettingsRequest = SetEntitySettingsRequest

class SetEntitySettingsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___SetEntitySettingsResponse = SetEntitySettingsResponse

class CreateEntityValueRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    ENTITY_VALUE_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook"""
    entity_id: builtins.str
    """Entity ID of the entity value to update"""
    @property
    def entity_value(self) -> global___EntityValue:
        """Entity value to update"""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        entity_value: global___EntityValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "entity_value", b"entity_value", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___CreateEntityValueRequest = CreateEntityValueRequest

class CreateEntityValueResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_VALUE_FIELD_NUMBER: builtins.int
    @property
    def entity_value(self) -> global___EntityValue: ...
    def __init__(
        self,
        *,
        entity_value: global___EntityValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value"]) -> None: ...

global___CreateEntityValueResponse = CreateEntityValueResponse

class UpdateEntityValueRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    ENTITY_VALUE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    UPDATE_ALL_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook"""
    entity_id: builtins.str
    """Entity ID of the entity value to update"""
    @property
    def entity_value(self) -> global___EntityValue:
        """Entity value to update"""
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Mask defining which fields to update"""
    update_all: builtins.bool
    """Ignore mask and update all fields"""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        entity_value: global___EntityValue | None = ...,
        update_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        update_all: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value", "update_mask", b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "entity_value", b"entity_value", "namespace", b"namespace", "playbook_id", b"playbook_id", "update_all", b"update_all", "update_mask", b"update_mask"]) -> None: ...

global___UpdateEntityValueRequest = UpdateEntityValueRequest

class UpdateEntityValueResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_VALUE_FIELD_NUMBER: builtins.int
    @property
    def entity_value(self) -> global___EntityValue: ...
    def __init__(
        self,
        *,
        entity_value: global___EntityValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_value", b"entity_value"]) -> None: ...

global___UpdateEntityValueResponse = UpdateEntityValueResponse

class DeleteEntityValueRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    ENTITY_VALUE_ID_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore ID of the playbook"""
    entity_id: builtins.str
    """Entity ID of the entity value to update"""
    entity_value_id: builtins.str
    """Entity value id to delete"""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        entity_value_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "entity_value_id", b"entity_value_id", "namespace", b"namespace", "playbook_id", b"playbook_id"]) -> None: ...

global___DeleteEntityValueRequest = DeleteEntityValueRequest

class DeleteEntityValueResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DeleteEntityValueResponse = DeleteEntityValueResponse

class SearchEntityValueRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    PLAYBOOK_ID_FIELD_NUMBER: builtins.int
    ENTITY_ID_FIELD_NUMBER: builtins.int
    PREDICATE_FIELD_NUMBER: builtins.int
    namespace: builtins.str
    """Namespace of the playbook"""
    playbook_id: builtins.str
    """Metastore id of the playbook"""
    entity_id: builtins.str
    """(Optional) The entity to search in. If not provided, the search
    will be performed on the entire playbook.
    """
    predicate: builtins.str
    """The predicate to be used for full text search."""
    def __init__(
        self,
        *,
        namespace: builtins.str = ...,
        playbook_id: builtins.str = ...,
        entity_id: builtins.str = ...,
        predicate: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_id", b"entity_id", "namespace", b"namespace", "playbook_id", b"playbook_id", "predicate", b"predicate"]) -> None: ...

global___SearchEntityValueRequest = SearchEntityValueRequest

class SearchEntityValueResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITY_VALUES_FIELD_NUMBER: builtins.int
    @property
    def entity_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EntityValue]:
        """A list of matching entity values, in order of relevance."""
    def __init__(
        self,
        *,
        entity_values: collections.abc.Iterable[global___EntityValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_values", b"entity_values"]) -> None: ...

global___SearchEntityValueResponse = SearchEntityValueResponse
