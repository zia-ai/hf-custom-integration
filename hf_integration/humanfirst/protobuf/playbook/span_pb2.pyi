"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class SpanIndex(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    @property
    def start(self) -> global___SpanPosition:
        """Starting position of the span.
        See `SpanPosition` fields for inclusively / exclusivity rules.
        """
    @property
    def end(self) -> global___SpanPosition:
        """Ending position of the span.
        See `SpanPosition` fields for inclusively / exclusivity rules.
        """
    def __init__(
        self,
        *,
        start: global___SpanPosition | None = ...,
        end: global___SpanPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end", b"end", "start", b"start"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end", b"end", "start", b"start"]) -> None: ...

global___SpanIndex = SpanIndex

class SpanPosition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUT_INDEX_FIELD_NUMBER: builtins.int
    CHARACTER_INDEX_FIELD_NUMBER: builtins.int
    input_index: builtins.int
    """The index of the input the span refers to.
    This index is inclusive on both start and end positions.
    Ex: input 0 + input 1 => start=0, end=1
    """
    character_index: builtins.int
    """The byte index of the input.
    This index is inclusive on the start position, and exclusive on the end position.

    Ex: hello world, span of 'hello' => start=0, end=5, span of 'world' => start=6, end=11

    Caution: When using encoding in which multiple bytes may represent a single displayable
    character (e.g. UTF-8, emojis), the byte index should enclose all bytes that make up the
    displayable character.
    """
    def __init__(
        self,
        *,
        input_index: builtins.int = ...,
        character_index: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["character_index", b"character_index", "input_index", b"input_index"]) -> None: ...

global___SpanPosition = SpanPosition
